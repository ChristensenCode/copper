from copper.ga import *
from copper.units import *
from copper.curves import *


class PkgDX:
    def __init__(
        self,
        ref_cap,
        ref_cap_unit,
        full_eff,
        full_eff_unit,
        part_eff,
        part_eff_unit,
        condenser_type,
        compressor_speed,
        set_of_curves="",
        sim_engine="energyplus",
    ):
        self.type = "pkg_dx"
        self.condenser_type = condenser_type
        self.compressor_speed = compressor_speed
        self.ref_cap = ref_cap
        self.ref_cap_unit = ref_cap_unit
        self.full_eff = full_eff
        self.full_eff_unit = full_eff_unit
        self.part_eff = part_eff
        self.part_eff_unit = part_eff_unit
        self.sim_engine = sim_engine
        self.set_of_curves = set_of_curves

    def generate_set_of_curves(
        self,
        method="typical",
        pop_size=100,
        tol=0.005,
        max_gen=15000,
        vars="",
        sFac=0.5,
        retain=0.2,
        random_select=0.1,
        mutate=0.95,
        bounds=(6, 10),
        base_curves=[],
    ):
        """Generate a set of curves for a particular PkgDX() object.

        :param str method: Method used to generate the set of curves, either `typical` or `best_match`

                           - `typical` uses typical curves and modify them to reach a particular IPLV
                           - `best_match` uses curves that best match the packaged DX object description
        :param int pop_size: Population size used by the genetic algorithm
        :param float tol: Tolerance used by the genetic algorithm to determine if the proposed solution is acceptable
                          The lower, the more stringent
        :param int max_gen: Maximum number of generation
        :param list() vars: List of variable to run the alorithm on
        :param float sFac: Linear fitness normalization factor, the higher the more aggressive the normalization will be
        :param float retain: Probability of retaining an individual in the next generation
        :param float random_select: Probability of randomly selecting an individual to be part of the next generation
        :param float mutate: Probability of an individual to be mutated in the next generation
        :param tuple() bounds: Random modification bounds (TODO: add more details)
        :return: Set of curves object generated by the genetic algorithm that matches the PkgDX() definition
        :rtype: SetofCurves()

        """
        ga = GA(
            self,
            method,
            pop_size,
            tol,
            max_gen,
            vars,
            sFac,
            retain,
            random_select,
            mutate,
            bounds,
            base_curves,
        )
        return ga.generate_set_of_curves()

    def calc_eff(self, eff_type, unit="kw/ton"):
        """Calculate efficiency.

        :param str eff_type: Packaged DX performance indicator, currently supported `kw/ton` (full load rating)
                             and `iplv` (part load rating)
        :param str unit: Unit of the efficiency indicator
        :return: Packaged DX performance indicator
        :rtype: float

        """
        pass
